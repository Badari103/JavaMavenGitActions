name: Build Maven Project
on:
  push:
    branches:
      - main  
  workflow_dispatch:
    inputs:
      job:
        description: 'Job to run'
        required: false  
        default: 'build'
        options:
          - 'build'
          - 'test'
          - 'deploy'

jobs:
  build:
    name: Build
#     if: github.event_name != 'workflow_dispatch' || github.event.inputs.job == 'build'
#     needs: check-status
    if: ${{github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.job == 'build') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Set up JDK
        uses: actions/setup-java@v2 
        with:
          java-version: '11'
          distribution: 'adopt'  # Specify the desired Java distribution, such as 'adopt', 'temurin', 'openjdk', etc.
          java-package: 'jdk'
          architecture: 'x64'
          check-latest: false
          server-id: 'github'
          server-username: ${{ github.actor }}
          server-password: ${{ secrets.GITHUB_TOKEN }}
          overwrite-settings: true
          job-status: 'success'
 

      - name: Build with Maven
        run: mvn clean install
        
      - name: Create Target Directory
        run: mkdir -p target
        
      - name: Create Artifacts Directory
        run: mkdir artifacts

      - name: Copy Target Directory
        run: cp -R target artifacts/

      - name: View Artifacts
        run: ls artifacts/
        
      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v2
        with:
          name: Build
          path: target/  
          
      - name: Set Build Status
        id: build-status
        run: echo "::set-output name=status::success"
        
  test:
    name: Test
#     if: github.event_name != 'workflow_dispatch' || github.event.inputs.job == 'test'
#     needs: check-status
    if: ${{github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.job == 'test') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Set up JDK
        uses: actions/setup-java@v2 
        with:
          java-version: '11'
          distribution: 'adopt'  # Specify the desired Java distribution, such as 'adopt', 'temurin', 'openjdk', etc.
          java-package: 'jdk'
          architecture: 'x64'
          check-latest: false
          server-id: 'github'
          server-username: ${{ github.actor }}
          server-password: ${{ secrets.GITHUB_TOKEN }}
          overwrite-settings: true
          job-status: 'success'
          
      - name: Run Tests with Maven
        run: mvn test 
        
      - name: Set Test Status
        id: test-status
        run: echo "::set-output name=status::success"
  deploy:
    name: Deploy to Netlify
    needs: [build,test]
    if: ${{github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.job == 'deploy') }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'  # Adjust the Node.js version if needed

      - name: Install Netlify CLI
        run: npm install -g netlify-cli
        
      - name: Get Netlify Site ID
        id: get_site_id
        run: |
          NETLIFY_SITE_NAME="java-maven-project"
          NETLIFY_SITE_ID=$(npx netlify sites:list --json | jq -r '.[] | select(.name == $NETLIFY_SITE_NAME) | .site_id')
          if [ -z "$NETLIFY_SITE_ID" ]; then
            NETLIFY_SITE_ID=$(npx netlify sites:create --json | jq -r '.site_id')
          fi
          echo "::set-output name=site_id::$NETLIFY_SITE_ID"

      - name: Deploy to Netlify
        run: netlify deploy --prod --dir= "target/*.jar" --site=${{ steps.get_site_id.outputs.site_id }} --auth=${{secrets.NETLIFY_API_TOKEN}}
        
#       - name: Build with Maven
#         run: mvn clean install

#       - name: Deploy to Netlify
#         env:
#           NETLIFY_ACCESS_TOKEN: ${{ secrets.NETLIFY_ACCESS_TOKEN }}
#           NETLIFY_SITE_NAME: 'java-maven-project'
#         run: |
#           curl -X POST "https://api.netlify.com/api/v1/sites" \
#             -H "Authorization: Bearer $NETLIFY_ACCESS_TOKEN" \
#             -d '{
#               "name": "'"$NETLIFY_SITE_NAME"'",
#               "repo": "Badari103 /JavaMavenGitActions",
#               "repoPath": "target/your-artifact.jar",
#               "buildSettings": {
#                 "command": "mvn clean install",
#                 "publish": "target"
#               }
#             }'
        
#   check-status:
#     name: Check Job Status
#     runs-on: ubuntu-latest
#     outputs:
#       job: ${{ github.event.inputs.job }}

#     steps:
#       - name: Check Build Status
#         if: needs.build.outputs.status == 'success'
#         run: echo "Build successful"

#       - name: Check Test Status
#         if: needs.test.outputs.status == 'success'
#         run: echo "Tests successful"
